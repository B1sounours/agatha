#!/bin/bash

# Prints lspcu in parseable format, removes comments, counts lines
TotalCores=$(lscpu -p | grep -v "#" | wc -l)

MongoDataDir=$1
DatabaseAddress=${2:-"localhost"}
DatabaseName=${3:-"pymoliere"}
NumReaders=${4:-$(($TotalCores / 2))}

if [[ ! -d $MongoDataDir ]]; then
  echo "$MongoDataDir must be a directory"
  exit 1
fi

GraphDataDir="$MongoDataDir/graph"
SentencesDataDir="$MongoDataDir/sentences"
MergedDataDir="$MongoDataDir/merged"

if [[ ! -d $SentencesDataDir ]]; then
  echo "$SentencesDataDir must be a directory"
  exit 1
fi

if [[ ! -d $GraphDataDir ]]; then
  echo "$GraphDataDir must be a directory"
  exit 1
fi

mkdir -p $MergedDataDir

MergedGraphData="$MergedDataDir/graph.tsv"
MergedSentencesData="$MergedDataDir/sentences.json"

GraphParts=$(ls $GraphDataDir/*.tsv)
SentencesParts=$(ls $SentencesDataDir/*.json)

if [[ ! -f $MergedGraphData ]]; then
  echo "Merging $(wc -w <<< $GraphParts) graph parts into $MergedGraphData"
  for graph_part in $GraphParts; do
    echo $graph_part
    (cat "$graph_part"; echo) >> $MergedGraphData
  done
fi

if [[ ! -f $MergedSentencesData ]]; then
  echo "Merging $(wc -w <<< $SentencesParts) parts into $MergedSentencesData"
  for sentences_part in $SentencesParts; do
    echo $sentences_part
    (cat "$sentences_part"; echo) >> $MergedSentencesData
  done
fi

echo "Dropping existing graph data"
mongo "$DatabaseAddress/$DatabaseName" --eval """
  db.graph.drop()
"""

echo "Dropping existing sentences data"
mongo "$DatabaseAddress/$DatabaseName" --eval """
  db.sentences.drop()
"""

echo "Importing all edge data"
mongoimport \
  -j $NumReaders \
  --db "$DatabaseName" \
  --host "$DatabaseAddress" \
  --collection graph \
  --type tsv \
  --fields "source,target,weight" \
  $MergedGraphData


echo "Importing all sentence data"
mongoimport \
  -j $NumReaders \
  --db "$DatabaseName" \
  --host "$DatabaseAddress" \
  --collection sentences \
  --type json \
  $MergedSentencesData

echo "Creating graph index on 'source' and 'id'"
mongo "$DatabaseAddress/$DatabaseName" --eval """
  db.graph.ensureIndex({'source': 'hashed'})
""" &
mongo "$DatabaseAddress/$DatabaseName" --eval """
  db.sentences.ensureIndex({'id': 'hashed'})
""" &

wait

